// Script de teste para verificar notifica√ß√µes nativas
// Execute este script no console do navegador (F12) quando estiver na p√°gina do dashboard

// Fun√ß√£o para testar notifica√ß√£o de conex√£o de usu√°rio
function testUserConnection() {
    console.log('üß™ Testando notifica√ß√£o de conex√£o de usu√°rio...');
    
    // Simular dados de um usu√°rio conectando
    const testUser = {
        id: 'test-socket-' + Date.now(),
        username: 'Usu√°rio Teste',
        rawUsername: 'teste',
        role: 'Administrador',
        isUBYUser: true,
        connectedAt: new Date().toLocaleString('pt-BR'),
        ip: '127.0.0.1'
    };
    
    // Emitir evento de usu√°rio conectado via socket
    if (window.socket && window.socket.connected) {
        window.socket.emit('authenticate', {
            userId: 'test-user-' + Date.now(),
            userName: 'teste',
            displayName: 'Usu√°rio Teste'
        });
        console.log('‚úÖ Evento de autentica√ß√£o enviado');
    } else {
        console.error('‚ùå Socket n√£o est√° conectado');
    }
}

// Fun√ß√£o para testar notifica√ß√£o de desconex√£o
function testUserDisconnection() {
    console.log('üß™ Testando notifica√ß√£o de desconex√£o de usu√°rio...');
    
    // Simular desconex√£o for√ßada
    if (window.socket && window.socket.connected) {
        window.socket.disconnect();
        console.log('‚úÖ Desconex√£o simulada');
        
        // Reconectar ap√≥s 3 segundos
        setTimeout(() => {
            window.socket.connect();
            console.log('üîÑ Reconectando...');
        }, 3000);
    } else {
        console.error('‚ùå Socket n√£o est√° conectado');
    }
}

// Fun√ß√£o para verificar se as notifica√ß√µes nativas est√£o habilitadas
function checkNotificationPermission() {
    console.log('üîî Verificando permiss√µes de notifica√ß√£o...');
    
    if ('Notification' in window) {
        console.log('‚úÖ API de Notification dispon√≠vel');
        console.log('üìã Permiss√£o atual:', Notification.permission);
        
        if (Notification.permission === 'default') {
            console.log('üîî Solicitando permiss√£o...');
            Notification.requestPermission().then(permission => {
                console.log('üìã Nova permiss√£o:', permission);
            });
        }
    } else {
        console.error('‚ùå API de Notification n√£o dispon√≠vel');
    }
}

// Fun√ß√£o para testar notifica√ß√£o direta do navegador
function testBrowserNotification() {
    console.log('üß™ Testando notifica√ß√£o direta do navegador...');
    
    if ('Notification' in window && Notification.permission === 'granted') {
        const notification = new Notification('Teste de Notifica√ß√£o', {
            body: 'Esta √© uma notifica√ß√£o de teste do navegador',
            icon: '/favicon.ico',
            tag: 'test-notification'
        });
        
        notification.onclick = function() {
            console.log('üñ±Ô∏è Notifica√ß√£o clicada');
            window.focus();
            notification.close();
        };
        
        console.log('‚úÖ Notifica√ß√£o de teste enviada');
    } else {
        console.error('‚ùå Permiss√£o de notifica√ß√£o n√£o concedida');
    }
}

// Executar testes automaticamente
console.log('üöÄ Script de teste de notifica√ß√µes carregado!');
console.log('üìã Comandos dispon√≠veis:');
console.log('  - testUserConnection(): Testa notifica√ß√£o de conex√£o');
console.log('  - testUserDisconnection(): Testa notifica√ß√£o de desconex√£o');
console.log('  - checkNotificationPermission(): Verifica permiss√µes');
console.log('  - testBrowserNotification(): Testa notifica√ß√£o direta');

// Verificar permiss√µes automaticamente
checkNotificationPermission();