/**
 * Configura√ß√£o de Firewall e Valida√ß√£o de Origem
 * Script para configurar regras de seguran√ßa no Windows
 */

const { execSync } = require('child_process');
const os = require('os');
const path = require('path');

class FirewallConfig {
    constructor() {
        this.appName = 'UBY-Agendamentos';
        this.httpPort = 3000;
        this.httpsPort = 3443;
        this.isWindows = os.platform() === 'win32';
    }

    /**
     * Configurar regras de firewall
     */
    async configureFirewall() {
        console.log('üî• Configurando regras de firewall...');
        
        if (!this.isWindows) {
            console.log('‚ö†Ô∏è  Configura√ß√£o de firewall dispon√≠vel apenas para Windows');
            return false;
        }

        try {
            // Verificar se est√° executando como administrador
            if (!this.isRunningAsAdmin()) {
                console.log('‚ö†Ô∏è  Execute como administrador para configurar o firewall');
                console.log('üí° Dica: Clique com o bot√£o direito e "Executar como administrador"');
                return false;
            }

            // Remover regras existentes (se houver)
            await this.removeExistingRules();

            // Adicionar regras de entrada
            await this.addInboundRules();

            // Adicionar regras de sa√≠da
            await this.addOutboundRules();

            console.log('‚úÖ Regras de firewall configuradas com sucesso!');
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao configurar firewall:', error.message);
            return false;
        }
    }

    /**
     * Verificar se est√° executando como administrador
     */
    isRunningAsAdmin() {
        try {
            execSync('net session', { stdio: 'ignore' });
            return true;
        } catch (error) {
            return false;
        }
    }

    /**
     * Remover regras existentes
     */
    async removeExistingRules() {
        console.log('üßπ Removendo regras existentes...');
        
        const rulesToRemove = [
            `${this.appName}-HTTP-In`,
            `${this.appName}-HTTPS-In`,
            `${this.appName}-HTTP-Out`,
            `${this.appName}-HTTPS-Out`
        ];

        for (const ruleName of rulesToRemove) {
            try {
                execSync(`netsh advfirewall firewall delete rule name="${ruleName}"`, { stdio: 'ignore' });
            } catch (error) {
                // Ignorar se a regra n√£o existir
            }
        }
    }

    /**
     * Adicionar regras de entrada
     */
    async addInboundRules() {
        console.log('üì• Configurando regras de entrada...');

        // Regra para HTTP (porta 3000)
        const httpInRule = `netsh advfirewall firewall add rule name="${this.appName}-HTTP-In" dir=in action=allow protocol=TCP localport=${this.httpPort} remoteip=127.0.0.1,::1,LocalSubnet`;
        
        // Regra para HTTPS (porta 3443)
        const httpsInRule = `netsh advfirewall firewall add rule name="${this.appName}-HTTPS-In" dir=in action=allow protocol=TCP localport=${this.httpsPort} remoteip=127.0.0.1,::1,LocalSubnet`;

        try {
            execSync(httpInRule, { stdio: 'inherit' });
            console.log(`‚úÖ Regra de entrada HTTP (porta ${this.httpPort}) adicionada`);
            
            execSync(httpsInRule, { stdio: 'inherit' });
            console.log(`‚úÖ Regra de entrada HTTPS (porta ${this.httpsPort}) adicionada`);
        } catch (error) {
            throw new Error(`Falha ao adicionar regras de entrada: ${error.message}`);
        }
    }

    /**
     * Adicionar regras de sa√≠da
     */
    async addOutboundRules() {
        console.log('üì§ Configurando regras de sa√≠da...');

        // Regra para HTTP (porta 3000)
        const httpOutRule = `netsh advfirewall firewall add rule name="${this.appName}-HTTP-Out" dir=out action=allow protocol=TCP localport=${this.httpPort} remoteip=127.0.0.1,::1,LocalSubnet`;
        
        // Regra para HTTPS (porta 3443)
        const httpsOutRule = `netsh advfirewall firewall add rule name="${this.appName}-HTTPS-Out" dir=out action=allow protocol=TCP localport=${this.httpsPort} remoteip=127.0.0.1,::1,LocalSubnet`;

        try {
            execSync(httpOutRule, { stdio: 'inherit' });
            console.log(`‚úÖ Regra de sa√≠da HTTP (porta ${this.httpPort}) adicionada`);
            
            execSync(httpsOutRule, { stdio: 'inherit' });
            console.log(`‚úÖ Regra de sa√≠da HTTPS (porta ${this.httpsPort}) adicionada`);
        } catch (error) {
            throw new Error(`Falha ao adicionar regras de sa√≠da: ${error.message}`);
        }
    }

    /**
     * Listar regras do firewall relacionadas ao app
     */
    async listRules() {
        console.log('üìã Listando regras do firewall...');
        
        try {
            const output = execSync(`netsh advfirewall firewall show rule name=all | findstr "${this.appName}"`, { encoding: 'utf8' });
            console.log(output);
        } catch (error) {
            console.log('‚ÑπÔ∏è  Nenhuma regra encontrada para o aplicativo');
        }
    }

    /**
     * Remover todas as regras do firewall
     */
    async removeAllRules() {
        console.log('üóëÔ∏è  Removendo todas as regras do firewall...');
        
        if (!this.isRunningAsAdmin()) {
            console.log('‚ö†Ô∏è  Execute como administrador para remover regras do firewall');
            return false;
        }

        try {
            await this.removeExistingRules();
            console.log('‚úÖ Todas as regras removidas com sucesso!');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao remover regras:', error.message);
            return false;
        }
    }

    /**
     * Verificar status do firewall
     */
    async checkFirewallStatus() {
        console.log('üîç Verificando status do firewall...');
        
        try {
            const output = execSync('netsh advfirewall show allprofiles state', { encoding: 'utf8' });
            console.log(output);
            
            // Verificar se o firewall est√° ativo
            const isActive = output.includes('State                                 ON');
            
            if (isActive) {
                console.log('‚úÖ Firewall do Windows est√° ativo');
            } else {
                console.log('‚ö†Ô∏è  Firewall do Windows est√° desativado');
                console.log('üí° Recomenda√ß√£o: Ative o firewall para maior seguran√ßa');
            }
            
            return isActive;
        } catch (error) {
            console.error('‚ùå Erro ao verificar status do firewall:', error.message);
            return false;
        }
    }

    /**
     * Configura√ß√£o completa de seguran√ßa
     */
    async setupCompleteSecurity() {
        console.log('üõ°Ô∏è  Iniciando configura√ß√£o completa de seguran√ßa...');
        console.log('');
        
        // Verificar status do firewall
        await this.checkFirewallStatus();
        console.log('');
        
        // Configurar regras
        const success = await this.configureFirewall();
        console.log('');
        
        if (success) {
            // Listar regras configuradas
            await this.listRules();
            console.log('');
            
            console.log('üéâ Configura√ß√£o de seguran√ßa conclu√≠da!');
            console.log('');
            console.log('üìã Resumo das configura√ß√µes:');
            console.log(`   ‚Ä¢ Porta HTTP: ${this.httpPort} (localhost apenas)`);
            console.log(`   ‚Ä¢ Porta HTTPS: ${this.httpsPort} (localhost apenas)`);
            console.log('   ‚Ä¢ Acesso restrito a localhost e rede local');
            console.log('   ‚Ä¢ Regras de entrada e sa√≠da configuradas');
            console.log('');
            console.log('‚ö†Ô∏è  IMPORTANTE:');
            console.log('   ‚Ä¢ Mantenha o firewall ativo');
            console.log('   ‚Ä¢ Use apenas conex√µes HTTPS em produ√ß√£o');
            console.log('   ‚Ä¢ Monitore logs de acesso regularmente');
        } else {
            console.log('‚ùå Falha na configura√ß√£o de seguran√ßa');
        }
        
        return success;
    }
}

// Fun√ß√£o principal
async function main() {
    const firewall = new FirewallConfig();
    
    const args = process.argv.slice(2);
    const command = args[0] || 'setup';
    
    switch (command) {
        case 'setup':
            await firewall.setupCompleteSecurity();
            break;
            
        case 'configure':
            await firewall.configureFirewall();
            break;
            
        case 'list':
            await firewall.listRules();
            break;
            
        case 'remove':
            await firewall.removeAllRules();
            break;
            
        case 'status':
            await firewall.checkFirewallStatus();
            break;
            
        case 'help':
        default:
            console.log('üî• Configurador de Firewall UBY Agendamentos');
            console.log('');
            console.log('Comandos dispon√≠veis:');
            console.log('  setup     - Configura√ß√£o completa de seguran√ßa (padr√£o)');
            console.log('  configure - Configurar apenas regras de firewall');
            console.log('  list      - Listar regras existentes');
            console.log('  remove    - Remover todas as regras');
            console.log('  status    - Verificar status do firewall');
            console.log('  help      - Mostrar esta ajuda');
            console.log('');
            console.log('Exemplo: node firewall-config.js setup');
            break;
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = FirewallConfig;